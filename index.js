require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  session,
} = require("grammy");
const {
  conversations,
  createConversation,
} = require("@grammyjs/conversations");
const { FileAdapter } = require("@grammyjs/storage-file");

// Constants
const CONFIG = {
  GROUP_ID: -1002447226535,
  ADMINS: [741130407, 1914761214],
  GAMES: {
    VALORANT: {
      name: "valorantConversation",
      questions: [
        { key: "age", text: "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?" },
        { key: "rank", text: "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–Ω–≥ –≤ Valorant?" },
        { key: "agents", text: "–ù–∞ –∫–∞–∫–∏—Ö –∞–≥–µ–Ω—Ç–∞—Ö –∏–≥—Ä–∞–µ—à—å?" },
        { key: "goals", text: "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?" },
      ],
    },
    DOTA: {
      name: "dotaConversation",
      questions: [
        { key: "age", text: "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?" },
        { key: "mmr", text: "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –º–º—Ä?" },
        {
          key: "heroes",
          text: "–ù–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–∞–µ—à—å?\n–ò –∫–∞–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        },
        { key: "goals", text: "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?" },
      ],
    },
  },
  DIALOG_TIMEOUT: 30 * 60 * 1000, // 30 minutes
  CLEANUP_INTERVAL: 5 * 60 * 1000, // 5 minutes
};

// Dialog Manager Class Definition
class DialogManager {
  constructor() {
    this.activeDialogs = new Map();
    this.initCleanupInterval();
  }

  // Private utility method for ID validation
  #validateUserId(userId) {
    return typeof userId === "string" && /^\d+$/.test(userId);
  }

  initCleanupInterval() {
    setInterval(() => this.cleanupStaleDialogs(), CONFIG.CLEANUP_INTERVAL);
  }

  cleanupStaleDialogs() {
    const now = Date.now();
    for (const [userId, dialog] of this.activeDialogs.entries()) {
      if (now - dialog.startTime > CONFIG.DIALOG_TIMEOUT) {
        this.close(userId);
      }
    }
  }

  create(userId, adminId) {
    const stringUserId = String(userId);
    const stringAdminId = String(adminId);

    if (
      !this.#validateUserId(stringUserId) ||
      !this.#validateUserId(stringAdminId)
    ) {
      throw new Error("Invalid user or admin ID");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    if (this.activeDialogs.has(stringUserId)) {
      return false;
    }

    this.activeDialogs.set(stringUserId, {
      userId: stringUserId,
      adminId: stringAdminId,
      status: "open",
      startTime: Date.now(),
    });
    return true;
  }

  isUserInDialog(userId) {
    return this.activeDialogs.has(String(userId));
  }

  isAdminInDialog(adminId) {
    return Array.from(this.activeDialogs.values()).some(
      (dialog) => dialog.adminId === String(adminId)
    );
  }

  getDialogByUser(userId) {
    return this.activeDialogs.get(String(userId));
  }

  getDialogByAdmin(adminId) {
    return Array.from(this.activeDialogs.values()).find(
      (dialog) => dialog.adminId === String(adminId)
    );
  }

  getDialogParticipant(userId) {
    const dialog = this.getDialogByUser(String(userId));
    if (dialog) return "user";

    const adminDialog = this.getDialogByAdmin(String(userId));
    if (adminDialog) return "admin";

    return null;
  }

  close(userId) {
    return this.activeDialogs.delete(String(userId));
  }
}

const dialogManager = new DialogManager();

function createGameConversation(gameName, gameConfig) {
  const conversationHandler = async (conversation, ctx) => {
    const answers = {};
    for (const question of gameConfig.questions) {
      await ctx.reply(question.text);
      const response = await conversation.wait();
      answers[question.key] = response.message.text;
    }

    const formattedMessage =
      `${
        ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name
      } –æ–ø–ª–∞—Ç–∏–ª ${gameName}\n` +
      Object.entries(answers)
        .map(([key, value]) => `${key}: ${value}`)
        .join("\n") +
      `\n–í—Ä–µ–º—è –°ET: ${new Date().toLocaleTimeString()}`;

    await ctx.api.sendMessage(CONFIG.GROUP_ID, formattedMessage);
    await ctx.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–∞–º.", {
      reply_markup: startKeyboard,
    });
  };

  Object.defineProperty(conversationHandler, "name", {
    value: gameConfig.name,
  });

  return conversationHandler;
}

function isAdmin(id) {
  return CONFIG.ADMINS.includes(Number(id));
}

const fileSendSessions = new Map();
const adminMenu = new InlineKeyboard()
  .text("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "admin_sendfile")
  .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", "admin_cancel");

const startKeyboard = new Keyboard()
  .text("–•–æ—á—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
  .row()
  .text("–Ø –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É")
  .resized()
  .oneTime();

function createBot() {
  const bot = new Bot(process.env.BOT_API_KEY);

  bot.use(
    session({
      initial: () => ({
        lastQuestions: {},
        answerMeta: null,
      }),
      storage: new FileAdapter({
        dirName: "sessions",
      }),
    })
  );

  bot.use(conversations());

  // Register conversations
  bot.use(
    createConversation(
      createGameConversation("Valorant", CONFIG.GAMES.VALORANT)
    )
  );
  bot.use(
    createConversation(createGameConversation("Dota 2", CONFIG.GAMES.DOTA))
  );

  // Command handlers
  bot.command("start", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    if (ctx.chat.type !== "private") {
      await ctx.reply(
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ username
    if (!ctx.from.username) {
      await ctx.reply(
        "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Username –≤ Telegram –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n2. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username"
      );
      return;
    }

    const keyboard = startKeyboard;

    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç [SkillsDiff](https://example.com)\n–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∏–∂–µ üëá",
      {
        parse_mode: "MarkdownV2",
        reply_markup: keyboard,
      }
    );
  });

  // Game handlers
  bot.hears("–Ø –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É", async (ctx) => {
    const gameKeyboard = new Keyboard()
      .text("Valorant")
      .text("Dota 2")
      .row()
      .text("–ù–∞–∑–∞–¥")
      .resized()
      .oneTime();

    await ctx.reply("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É", {
      reply_markup: gameKeyboard,
    });
  });

  bot.hears("Valorant", async (ctx) => {
    await ctx.conversation.enter(CONFIG.GAMES.VALORANT.name);
  });

  bot.hears("Dota 2", async (ctx) => {
    await ctx.conversation.enter(CONFIG.GAMES.DOTA.name);
  });

  bot.hears("–ù–∞–∑–∞–¥", async (ctx) => {
    await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", {
      reply_markup: startKeyboard,
    });
  });

  // FAQ handlers
  bot.hears("–•–æ—á—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx) => {
    const faqInlineKeyboard = new InlineKeyboard()
      .text("1", "answer-1")
      .text("2", "answer-2")
      .text("3", "answer-3")
      .row()
      .text("4", "answer-4")
      .text("5", "answer-5")
      .text("6", "answer-6");
    const faqKeyboard = new Keyboard()
      .text("–ù–µ –Ω–∞—à–µ–ª —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")
      .text("–ù–∞–∑–∞–¥")
      .resized();
    await ctx.reply(
      "*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n1\\. –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É?\n2\\. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–ª?\n3\\. –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ?\n4\\. –ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–æ—Å—Ç–∞ –≤—ã –¥–∞–µ—Ç–µ? –ß—Ç–æ –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?\n5\\. –ú–æ–≥—É –ª–∏ —è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?\n6\\. –ö–∞–∫ —Å—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º?\n\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ üëá",
      {
        parse_mode: "MarkdownV2",
        reply_markup: faqInlineKeyboard,
      }
    );
    await ctx.reply("–ù–µ –Ω–∞—à–µ–ª —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? üëá", {
      reply_markup: faqKeyboard,
    });
  });

  bot.hears("–ù–µ –Ω–∞—à–µ–ª —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!", async (ctx) => {
    ctx.reply("–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?", {
      reply_markup: new InlineKeyboard()
        .text("–î–∞", "start-conv")
        .text("–ù–µ—Ç", "cancel"),
    });
  });

  //! ADMIN
  bot.command("admin", async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
    }

    await ctx.reply("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", {
      reply_markup: adminMenu,
    });
  });

  bot.callbackQuery("admin_sendfile", async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.answerCallbackQuery({
        text: "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
        show_alert: true,
      });
    }

    fileSendSessions.set(ctx.from.id, { step: "awaitingUserId" });
    await ctx.answerCallbackQuery();
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:");
  });

  bot.callbackQuery("admin_cancel", async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.answerCallbackQuery({
        text: "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
        show_alert: true,
      });
    }

    if (fileSendSessions.has(ctx.from.id)) {
      fileSendSessions.delete(ctx.from.id);
      await ctx.answerCallbackQuery({
        text: "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        show_alert: false,
      });
      await ctx.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    } else {
      await ctx.answerCallbackQuery({
        text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.",
        show_alert: false,
      });
      await ctx.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    }
  });

  //! CallBack
  bot.callbackQuery("cancel", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –µ—â–µ?", {
      reply_markup: startKeyboard,
    });
  });

  bot.callbackQuery("start-conv", async (ctx) => {
    ctx.answerCallbackQuery();

    const userId = ctx.from.id;
    const userName = ctx.from.username;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.waitingForSupport = {
      userId: userId,
      userName: userName,
      messageId: ctx.callbackQuery.message.message_id, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    };

    await ctx.reply("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö–µ–ª–ø–µ—Ä–∞...", {
      reply_markup: new Keyboard().text("–ü–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥").oneTime().resized(),
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º messageId
    const supportMessage = await ctx.api.sendMessage(
      CONFIG.GROUP_ID,
      `@${userName} (ID: ${userId}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É`,
      {
        reply_markup: new InlineKeyboard()
          .text("–û—Ç–≤–µ—Ç–∏—Ç—å", `answer_${userId}`) // –¥–æ–±–∞–≤–ª—è–µ–º userId –≤ callback_data
          .text("–ó–∞–∫—Ä—ã—Ç—å", `close_${userId}`),
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    ctx.session.waitingForSupport.supportMessageId = supportMessage.message_id;
  });

  bot.callbackQuery(/^answer_(\d+)$/, async (ctx) => {
    ctx.answerCallbackQuery();

    const userId = String(ctx.match[1]);
    const adminId = String(ctx.from.id);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –∞–¥–º–∏–Ω –¥—Ä—É–≥–∏–º –¥–∏–∞–ª–æ–≥–æ–º
      if (dialogManager.isAdminInDialog(adminId)) {
        await ctx.reply(
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ."
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ
      if (dialogManager.isUserInDialog(userId)) {
        await ctx.reply(
          "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
      if (!dialogManager.create(userId, adminId)) {
        await ctx.reply(
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.api.sendMessage(
        userId,
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        {
          reply_markup: new Keyboard()
            .text("–ü–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥")
            .oneTime()
            .resized(),
        }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      await ctx.api.sendMessage(
        adminId,
        "–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        {
          reply_markup: new Keyboard()
            .text("–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥")
            .oneTime()
            .resized(),
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
      await ctx.api.editMessageText(
        CONFIG.GROUP_ID,
        ctx.callbackQuery.message.message_id,
        `–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${userId} –Ω–∞—á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @${ctx.from.username}`
      );
    } catch (error) {
      console.error("Error in starting dialog:", error);
      dialogManager.close(userId);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
      );
    }
  });

  bot.callbackQuery(/^close_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ callback_data
    ctx.answerCallbackQuery();

    const dialog = dialogManager.getDialog(userId);
    if (dialog) {
      dialogManager.close(userId);
      try {
        await ctx.api.sendMessage(
          userId,
          "–í–∞—à –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.",
          {
            reply_markup: startKeyboard,
          }
        );
        await ctx.reply("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –¥–∏–∞–ª–æ–≥.");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await ctx.api.editMessageText(
          CONFIG.GROUP_ID,
          ctx.callbackQuery.message.message_id,
          `–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${userId} –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @${ctx.from.username}`
        );
      } catch (error) {
        console.error("Error in admin-close handler:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞.");
      }
    } else {
      await ctx.reply("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  });

  bot.hears("–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", async (ctx) => {
    const adminId = String(ctx.from.id);
    const dialog = dialogManager.getDialogByAdmin(adminId);

    if (!dialog) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.");
      return;
    }

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.api.sendMessage(
        dialog.userId,
        "–î–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.",
        {
          reply_markup: startKeyboard,
        }
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
      await ctx.reply("–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.", {
        reply_markup: new Keyboard().text("–ù–∞–∑–∞–¥").oneTime().resized(),
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      dialogManager.close(dialog.userId);
    } catch (error) {
      console.error("Error in closing dialog:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞.");
    }
  });

  bot.hears("–ü–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥", async (ctx) => {
    const userId = String(ctx.from.id);

    const dialog = dialogManager.getDialogByUser(userId); // Fixed: changed from getDialog to getDialogByUser
    if (dialog) {
      dialogManager.close(userId);
      await ctx.reply("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∏–∞–ª–æ–≥.", {
        reply_markup: startKeyboard,
      });
      await bot.api.sendMessage(
        CONFIG.GROUP_ID,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${
          ctx.from.username || ctx.from.first_name
        } –ø–æ–∫–∏–Ω—É–ª –¥–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
      );
    } else {
      await ctx.reply("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  });

  //! Answer callbacks
  bot.callbackQuery("answer-1", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–∞—à–µ–º [—Å–∞–π—Ç–µ](https://example.com)", {
      parse_mode: "MarkdownV2",
    });
  });

  bot.callbackQuery("answer-2", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply(
      '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É"\n–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–∑–∂–µ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä! ',
      {
        parse_mode: "MarkdownV2",
      }
    );
  });

  bot.callbackQuery("answer-3", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply(
      "–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º\\.\n–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è –≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
      {
        parse_mode: "MarkdownV2",
      }
    );
  });

  bot.callbackQuery("answer-4", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply(
      "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç—Ä–µ–Ω–µ—Ä–∞",
      {
        parse_mode: "MarkdownV2",
      }
    );
  });

  bot.callbackQuery("answer-5", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply("–î–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏", {
      parse_mode: "MarkdownV2",
    });
  });

  bot.callbackQuery("answer-6", async (ctx) => {
    ctx.answerCallbackQuery();
    ctx.reply(
      "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ [SkillsDiff](https://www.skillsdiff.com)",
      {
        parse_mode: "MarkdownV2",
      }
    );
  });

  bot.on("message:text", async (ctx) => {
    const adminId = ctx.from.id;

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –≤ —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    if (fileSendSessions.has(adminId)) {
      const session = fileSendSessions.get(adminId);

      if (session.step === "awaitingUserId") {
        const userId = ctx.message.text.trim();
        if (!/^\d+$/.test(userId)) {
          return ctx.reply("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.");
        }
        session.userId = userId;
        session.step = "awaitingFile";
        return ctx.reply(
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        );
      }
    }

    // ‚û°Ô∏è –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è, –∏–¥—ë–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥

    const senderId = String(ctx.from.id);
    const text = ctx.message.text;

    if (
      text.startsWith("/") ||
      text === "–ü–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥" ||
      text === "–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥" ||
      text === "–ù–∞–∑–∞–¥"
    ) {
      return;
    }

    const participantRole = dialogManager.getDialogParticipant(senderId);
    if (!participantRole) {
      return;
    }

    let dialog;
    if (participantRole === "user") {
      dialog = dialogManager.getDialogByUser(senderId);
      try {
        await ctx.api.sendMessage(
          dialog.adminId,
          `–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
            ctx.from.username ? `@${ctx.from.username}` : senderId
          }:\n${text}`
        );
      } catch (error) {
        console.error("Error sending message to admin:", error);
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        dialogManager.close(senderId);
      }
    } else if (participantRole === "admin") {
      dialog = dialogManager.getDialogByAdmin(senderId);
      try {
        await ctx.api.sendMessage(dialog.userId, text);
      } catch (error) {
        console.error("Error sending message to user:", error);
        await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        dialogManager.close(dialog.userId);
      }
    }
  });

  bot.on("message:document", async (ctx) => {
    const adminId = ctx.from.id;

    if (fileSendSessions.has(adminId)) {
      const session = fileSendSessions.get(adminId);

      if (session.step === "awaitingFile") {
        const userId = session.userId;

        try {
          await ctx.api.sendMessage(
            userId,
            "–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞:"
          );
          await ctx.api.sendDocument(userId, ctx.message.document.file_id);
          await ctx.reply(`‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${userId}`, {
            reply_markup: adminMenu,
          });

          // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ª–æ–≥–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø—É
          try {
            await ctx.api.sendMessage(
              CONFIG.GROUP_ID,
              `–ê–¥–º–∏–Ω @${ctx.from.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${userId}`
            );
          } catch (logError) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ –≥—Ä—É–ø–ø—É:", logError);
            // –ù–µ –º–µ—à–∞–µ–º –∞–¥–º–∏–Ω—É ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", error);
          await ctx.reply(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.",
            {
              reply_markup: adminMenu,
            }
          );
        }

        fileSendSessions.delete(adminId);
      }
    }
  });

  // Error handling
  bot.catch((err) => {
    console.error(
      `Error handling update ${err.ctx.update.update_id}:`,
      err.error
    );
  });

  return bot;
}

const bot = createBot();
bot.start();
