import { StorageAdapter } from './deps.node.js';
type Serializer<Session> = (input: Session) => string;
type Deserializer<Session> = (input: string) => Session;
interface ConstructorOptions<Session> {
    dirName?: string;
    serializer?: Serializer<Session>;
    deserializer?: Deserializer<Session>;
}
export declare class FileAdapter<T> implements StorageAdapter<T> {
    private folderPath;
    serializer: Serializer<T>;
    deserializer: Deserializer<T>;
    /**
     * @constructor
     * @param {opts} options options
     * @param {opts.dirName} options.dirName - name of directory where files should be stored. Defaults to `sessions`.
     * @param {opts.serializer} options.serializer
     * serializer of file. Default `JSON.stringify(input, null, '\t')`.
     *
     * @param {opts.deserializer} options.deserializer
     * deserializer of file. Default `JSON.parse(input)`.
     */
    constructor(opts?: ConstructorOptions<T>);
    private resolveSessionPath;
    private findSessionFile;
    read(key: string): Promise<T>;
    write(key: string, value: T): Promise<void>;
    delete(key: string): Promise<void>;
}
export {};
